{"version":3,"file":"static/js/77.bfa16e50.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","webpack://myportfolio/./src/components/SignUpForm/SignUpForm.module.css?655f","components/SignUpForm/SignUpForm.jsx","webpack://myportfolio/./src/components/SignInForm/SignInForm.module.css?03fb","components/SignInForm/SignInForm.jsx","pages/AuthorizationPage/AuthorizationPage.jsx","pages/VerifyEmailPage/VerifyEmailPage.jsx"],"sourcesContent":["import React from \"react\";\nimport \"./Loader.css\";\n\nconst Loader = () => {\n  return (\n    <div className=\"loader-container\">\n      <div className=\"spinner\"></div>\n    </div>\n  );\n};\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"containerSignUp\":\"SignUpForm_containerSignUp__+vjGi\",\"formInput\":\"SignUpForm_formInput__IenXC\",\"hasContent\":\"SignUpForm_hasContent__KnxPm\",\"boxBtnSignIn\":\"SignUpForm_boxBtnSignIn__9+u4e\",\"buttonSignIn\":\"SignUpForm_buttonSignIn__Daypv\",\"errorMessage\":\"SignUpForm_errorMessage__YZUhD\"};","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport styles from \"./SignUpForm.module.css\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { registerThunk } from \"../../redux/auth/authThunks\";\nimport  AuthStatus  from \"../../constants/userRolesEnum\";\nimport { setAuthSwitchToShow } from \"../../redux/auth/authReducer\";\n\n//реєсрація користувача в системі (ввод нового користувача користувача)\nconst SignUpForm = () => {\n  const dispatch = useDispatch();\n\n  // Використання useFormik\n  const formik = useFormik({\n    initialValues: {\n      login: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n\n    validationSchema: Yup.object({\n      login: Yup.string()\n        .min(2, \"Name must be at least 2 characters\") // Мінімум 2 символи\n        .max(50, \"Name must be less than 50 characters\") // Максимум 50 символів\n        .required(\"Enter your login\"),\n      email: Yup.string()\n        .email(\"Invalid email address\") // Перевірка на валідну пошту\n        .required(\"Email is required\"), // Поле обов'язкове\n      password: Yup.string()\n        .min(8, \"Password must be at least 8 characters\") // Мінімум 8 символів\n        .matches(/[A-Z]/, \"Must contain at least one uppercase letter\") // Мінімум одна велика літера\n        .matches(/[a-z]/, \"Must contain at least one lowercase letter\") // Мінімум одна маленька літера\n        .matches(/[0-9]/, \"Must contain at least one number\") // Мінімум одна цифра\n        .required(\"Password is required\"),\n      confirmPassword: Yup.string()\n        .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\") // Перевірка на співпадіння\n        .required(\"Confirm Password is required\"),\n    }),\n    onSubmit: (values, { resetForm }) => {\n      sendNewUserToDatabase(values);\n      // console.log(\"Form data:\", values);\n      resetForm(); // Очищення форми після відправки\n    },\n  });\n\n  function sendNewUserToDatabase(dataUser) {\n    const { login, email, password } = dataUser;\n\n    const newUser = {\n      login: login.trim(),\n      email: email.trim(),\n      password: password.trim(),\n    };\n\n    dispatch(registerThunk(newUser));\n    dispatch(setAuthSwitchToShow(AuthStatus.Registered));\n  }\n\n  return (\n    <form className={styles.containerSignUp} onSubmit={formik.handleSubmit}>\n      {/* Поле login */}\n      <div\n        className={`${styles.formInput} ${\n          formik.values.login ? styles.hasContent : \"\"\n        }`}\n      >\n        <input\n          type=\"text\"\n          id=\"login\"\n          name=\"login\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur} // Додаткове відстеження втрати фокусу\n          value={formik.values.login}\n          required\n        />\n        <label htmlFor=\"login\">Login</label>\n        {formik.touched.login && formik.errors.login && (\n          <p className={styles.errorMessage}>{formik.errors.login}</p>\n        )}\n      </div>\n      {/* Поле Email */}\n      <div\n        className={`${styles.formInput} ${\n          formik.values.email ? styles.hasContent : \"\"\n        }`}\n      >\n        <input\n          type=\"email\"\n          id=\"email\"\n          name=\"email\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur} // Додаткове відстеження втрати фокусу\n          value={formik.values.email}\n          required\n        />\n        <label htmlFor=\"email\">Email</label>\n        {formik.touched.email && formik.errors.email && (\n          <p className={styles.errorMessage}>{formik.errors.email}</p>\n        )}\n      </div>\n\n      {/* Поле Password */}\n      <div\n        className={`${styles.formInput} ${\n          formik.values.password ? styles.hasContent : \"\"\n        }`}\n      >\n        <input\n          type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur} // Додаткове відстеження втрати фокусу\n          value={formik.values.password}\n          required\n        />\n        <label htmlFor=\"password\">Password</label>\n        {formik.touched.password && formik.errors.password && (\n          <p className={styles.errorMessage}>{formik.errors.password}</p>\n        )}\n      </div>\n      {/* Поле confirm Password */}\n      <div\n        className={`${styles.formInput} ${\n          formik.values.confirmPassword ? styles.hasContent : \"\"\n        }`}\n      >\n        <input\n          type=\"password\"\n          id=\"confirmPassword\"\n          name=\"confirmPassword\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur} // Додаткове відстеження втрати фокусу\n          value={formik.values.confirmPassword}\n          required\n        />\n        <label htmlFor=\"confirmPassword\">Confirm password</label>\n        {formik.touched.confirmPassword && formik.errors.confirmPassword && (\n          <p className={styles.errorMessage}>{formik.errors.confirmPassword}</p>\n        )}\n      </div>\n\n      {/* Кнопка Submit */}\n      <div className={styles.boxBtnSignIn}>\n        <button className={styles.buttonSignIn} type=\"submit\">\n          Sign Up\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default SignUpForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"containerSignIn\":\"SignInForm_containerSignIn__C5T5r\",\"formInput\":\"SignInForm_formInput__pgL5W\",\"hasContent\":\"SignInForm_hasContent__AZ+NA\",\"boxBtnSignIn\":\"SignInForm_boxBtnSignIn__BBTY2\",\"buttonSignIn\":\"SignInForm_buttonSignIn__MShtb\",\"errorMessage\":\"SignInForm_errorMessage__mClZW\"};","import React, {useEffect} from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectToken } from \"../../redux/auth/authSelectors\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useNavigate } from \"react-router-dom\"; \nimport styles from \"./SignInForm.module.css\";\nimport { loginThunk } from \"../../redux/auth/authThunks\";\n\n// import { requestLogin } from \"../../API/Auth/fetchRegisterUser\";\n\n//авторизація користувача в системі(вхід)\nconst SignInForm = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const token = useSelector(selectToken); \n \n\n  useEffect(() => {\n    if (String(token) !== \"null\") {\n      navigate(\"/UserPage\");\n    }\n  }, [token, navigate]);\n\n\n\n\n  // Використання useFormik\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n    },\n\n    validationSchema: Yup.object({\n      email: Yup.string()\n        .email(\"Invalid email address\") // Перевірка на валідну пошту\n        .required(\"Email is required\"), // Поле обов'язкове\n      password: Yup.string()\n        .min(8, \"Password must be at least 8 characters\") // Мінімум 8 символів\n        .matches(/[A-Z]/, \"Must contain at least one uppercase letter\") // Мінімум одна велика літера\n        .matches(/[a-z]/, \"Must contain at least one lowercase letter\") // Мінімум одна маленька літера\n        .matches(/[0-9]/, \"Must contain at least one number\") // Мінімум одна цифра\n        .required(\"Password is required\"), // Поле обов'язкове\n    }),\n    onSubmit: (values, { resetForm }) => {\n   \n      authenticationWithData(values);\n      resetForm(); // Очищення форми після відправки\n    },\n  });\n\n  // ф-ція отримує логін та пароль користувача\n  function authenticationWithData(userData) {\n  \n    const user = {\n      email: userData.email.trim(),\n      password: userData.password.trim(),\n    }\n    dispatch(loginThunk(user));\n  }\n\n  return (\n    <form className={styles.containerSignIn} onSubmit={formik.handleSubmit}>\n      {/* Поле Email */}\n      <div\n        className={`${styles.formInput} ${\n          formik.values.email ? styles.hasContent : \"\"\n        }`}\n      >\n        <input\n          type=\"email\"\n          id=\"email\"\n          name=\"email\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur} // Додаткове відстеження втрати фокусу\n          value={formik.values.email}\n          required\n        />\n        <label htmlFor=\"email\">Email</label>\n        {formik.touched.email && formik.errors.email && (\n          <p className={styles.errorMessage}>{formik.errors.email}</p>\n        )}\n      </div>\n\n      {/* Поле Password */}\n      <div\n        className={`${styles.formInput} ${\n          formik.values.password ? styles.hasContent : \"\"\n        }`}\n      >\n        <input\n          type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur} // Додаткове відстеження втрати фокусу\n          value={formik.values.password}\n          required\n        />\n        <label htmlFor=\"password\">Password</label>\n        {formik.touched.password && formik.errors.password && (\n          <p className={styles.errorMessage}>{formik.errors.password}</p>\n        )}\n      </div>\n\n      {/* Кнопка Submit */}\n      <div className={styles.boxBtnSignIn}>\n        <button className={styles.buttonSignIn} type=\"submit\">\n          Sign In\n        </button>\n      </div>\n      \n    </form>\n  );\n};\n\nexport default SignInForm;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport './AuthorizationPage.css';\nimport SignUpForm from \"../../components/SignUpForm/SignUpForm\";\nimport SignInForm from \"../../components/SignInForm/SignInForm\";\nimport VerifyEmailPage from \"../VerifyEmailPage/VerifyEmailPage\";\nimport  AuthStatus  from \"../../constants/userRolesEnum\";\nimport {\n  selectAuthSwitchToShow,\n  selectIsLoading,\n} from \"../../redux/auth/authSelectors\";\nimport { setAuthSwitchToShow } from \"../../redux/auth/authReducer\";\nimport Loader from \"../../components/Loader/Loader\";\n\nconst AuthorizationPage = () => {\n  const authPageToShow = useSelector(selectAuthSwitchToShow);\n   const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n  \n\n  useEffect(() => {\n    // console.log(\"@@@@@@@@@@@@@authPageToShow\");\n    // console.log(authPageToShow);\n  }, [authPageToShow]);\n\n  return (\n    <>\n      <div className=\"authorizationContainerMain\">\n        <div className=\"info\">Authorization in the development process!!!</div>\n        {authPageToShow !== AuthStatus.Registered ? (\n          <div className=\"authorizationContainer\">\n            <div className=\"tabs\">\n              <Link\n                to=\"SignIn\"\n                className={`${\"tab\"} ${\n                  authPageToShow === AuthStatus.LogIn ? \"active\" : \"\"\n                }`}\n                onClick={() => dispatch(setAuthSwitchToShow(AuthStatus.LogIn))}\n              >\n                SIGN IN\n              </Link>\n\n              <Link\n                to=\"SignUp\"\n                className={`${\"tab\"} ${\n                  authPageToShow === AuthStatus.LogUp ? \"active\" : \"\"\n                }`}\n                onClick={() => dispatch(setAuthSwitchToShow(AuthStatus.LogUp))}\n              >\n                SIGN UP\n              </Link>\n            </div>\n            <div className=\"content\">\n              {authPageToShow === AuthStatus.LogIn && <SignInForm />}\n              {authPageToShow === AuthStatus.LogUp && <SignUpForm />}\n              {/* {authenticated && <UserInfo/>} */}\n            </div>\n          </div>\n        ) : (\n          <VerifyEmailPage />\n        )}\n        {isLoading && <Loader/>}\n      </div>\n    </>\n  );\n}\n\nexport default AuthorizationPage\n","import React from 'react';\nimport {  useDispatch } from \"react-redux\";\nimport { Link, useNavigate  } from \"react-router-dom\"; \nimport './VerifyEmailPage.css';\nimport AuthStatus from \"../../constants/userRolesEnum\";\nimport { setAuthSwitchToShow } from \"../../redux/auth/authReducer\";\n\nconst VerifyEmailPage = () => {\n    const dispatch = useDispatch();\n  const navigate = useNavigate();\n  \n    const handleSignInClick = () => {\n      dispatch(setAuthSwitchToShow(AuthStatus.LogIn));\n      navigate(\"/AuthorizationPage/SignIn\"); // Переходимо на сторінку SignIn\n    };\n\n  return (\n    <div className=\"verifyEmailContainer\">\n      <div className=\"VerifyEmailText\">\n        Please confirm your email by clicking the link in the email. Once\n        confirmed, you will be able to log in using your credentials.\n        <Link\n          to=\"SignIn\"\n          className=\"signInLink\"\n          onClick={handleSignInClick}\n        >\n          Sign in here\n        </Link>\n        \n      </div>\n    </div>\n  );\n};\n\nexport default VerifyEmailPage\n"],"names":["Loader","_jsx","className","children","SignUpForm","dispatch","useDispatch","formik","useFormik","initialValues","login","email","password","confirmPassword","validationSchema","Yup","min","max","required","matches","oneOf","onSubmit","values","_ref","resetForm","dataUser","newUser","trim","registerThunk","setAuthSwitchToShow","AuthStatus","Registered","sendNewUserToDatabase","_jsxs","styles","handleSubmit","type","id","name","onChange","handleChange","onBlur","handleBlur","value","htmlFor","touched","errors","SignInForm","navigate","useNavigate","token","useSelector","selectToken","useEffect","String","userData","user","loginThunk","authenticationWithData","AuthorizationPage","authPageToShow","selectAuthSwitchToShow","isLoading","selectIsLoading","_Fragment","Link","to","LogIn","onClick","LogUp","VerifyEmailPage","handleSignInClick"],"sourceRoot":""}