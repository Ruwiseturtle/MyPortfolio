{"version":3,"file":"static/js/706.85d025c9.chunk.js","mappings":"+IACA,QAA0C,sDAA1C,EAAwH,oDAAxH,EAA+L,+CAA/L,EAA0P,wCAA1P,EAA8S,wCAA9S,EAAmW,yCAAnW,EAA8Z,8CAA9Z,EAA8d,8CAA9d,EAA2hB,2C,8DCQ3hB,MA8GA,EA9G6BA,KAC3B,MAAOC,IAAgBC,EAAAA,EAAAA,MACjBC,EAAoBF,EAAaG,IAAI,qBAErCC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,SAAU,GACVC,gBAAiB,IAGnBC,iBAAkBC,EAAAA,GAAW,CAC3BH,SAAUG,EAAAA,KACPC,IAAI,EAAG,0CACPC,QAAQ,QAAS,8CACjBA,QAAQ,QAAS,8CACjBA,QAAQ,QAAS,oCACjBC,SAAS,wBACZL,gBAAiBE,EAAAA,KACRI,MAAM,CAACJ,EAAAA,GAAQ,YAAa,MAAO,wBACnCG,SAAS,kCAEpBE,SAAUA,CAACC,EAAMC,KAAqB,IAAnB,UAAEC,GAAWD,GAOlCE,eAA+BZ,GAC7Ba,QAAQC,IAAI,mDACZD,QAAQC,IAAInB,GACZkB,QAAQC,IAAId,GACfa,QAAQC,IAAI,uBACT,IACED,QAAQC,IAAI,uBAEZ,MAAMC,QAAeC,EAAAA,EAAAA,IAAcrB,EAAmBK,GAEtDe,EAAOE,QAAUC,EAAAA,OAAOD,QAAQF,EAAOI,SAAWD,EAAAA,OAAOE,QAAQL,EAAOI,QAE1E,CAAE,MAAOE,GACNR,QAAQC,IAAI,uBACbD,QAAQQ,MAAM,4BAA6BA,GAC3CH,EAAAA,OAAOE,QAAQ,4BACjB,CACF,CAvBIE,CAAgBb,EAAOT,UAEvBW,GAAW,IAuBf,OACEY,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAA+BC,SAAA,EAE7CC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAA6BC,SAAC,wBAC9CC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAwBC,UACtCH,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAkBjB,SAAUX,EAAO+B,aAAaF,SAAA,EAC/DH,EAAAA,EAAAA,MAAA,OACEC,UAAS,GAAAK,OAAKJ,EAAgB,KAAAI,OAC5BhC,EAAOY,OAAOqB,MAAQL,EAAoB,IACzCC,SAAA,EAEHC,EAAAA,EAAAA,KAAA,SACEI,KAAK,WACLC,GAAG,WACHC,KAAK,WACLC,SAAUrC,EAAOsC,aACjBC,OAAQvC,EAAOwC,WACfC,MAAOzC,EAAOY,OAAOT,SACrBM,UAAQ,KAEVqB,EAAAA,EAAAA,KAAA,SAAOY,QAAQ,WAAUb,SAAC,aACzB7B,EAAO2C,QAAQxC,UAAYH,EAAO4C,OAAOzC,WACxC2B,EAAAA,EAAAA,KAAA,KAAGH,UAAWC,EAAoBC,SAAE7B,EAAO4C,OAAOzC,eAKtDuB,EAAAA,EAAAA,MAAA,OACEC,UAAS,GAAAK,OAAKJ,EAAgB,KAAAI,OAC5BhC,EAAOY,OAAOR,gBAAkBwB,EAAoB,IACnDC,SAAA,EAEHC,EAAAA,EAAAA,KAAA,SACEI,KAAK,WACLC,GAAG,kBACHC,KAAK,kBACLC,SAAUrC,EAAOsC,aACjBC,OAAQvC,EAAOwC,WACfC,MAAOzC,EAAOY,OAAOR,gBACrBK,UAAQ,KAEVqB,EAAAA,EAAAA,KAAA,SAAOY,QAAQ,kBAAiBb,SAAC,qBAChC7B,EAAO2C,QAAQvC,iBACdJ,EAAO4C,OAAOxC,kBACZ0B,EAAAA,EAAAA,KAAA,KAAGH,UAAWC,EAAoBC,SAC/B7B,EAAO4C,OAAOxC,sBAMvB0B,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAuBC,UACrCC,EAAAA,EAAAA,KAAA,UAAQH,UAAWC,EAAwBM,KAAK,SAAQL,SAAC,kBAO3D,C","sources":["webpack://myportfolio/./src/pages/EnterNewPasswordPage/EnterNewPasswordPage.module.css?5ba5","pages/EnterNewPasswordPage/EnterNewPasswordPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"containerForgotPassword\":\"EnterNewPasswordPage_containerForgotPassword__wlShj\",\"boxTextForgotPassword\":\"EnterNewPasswordPage_boxTextForgotPassword__qqoX8\",\"containerForForm\":\"EnterNewPasswordPage_containerForForm__KMRxV\",\"formEmail\":\"EnterNewPasswordPage_formEmail__ogeXx\",\"formInput\":\"EnterNewPasswordPage_formInput__zjEMM\",\"hasContent\":\"EnterNewPasswordPage_hasContent__-F8eq\",\"boxBtnSendEmail\":\"EnterNewPasswordPage_boxBtnSendEmail__jzhD0\",\"buttonSendEmail\":\"EnterNewPasswordPage_buttonSendEmail__JPDne\",\"errorMessage\":\"EnterNewPasswordPage_errorMessage__+zYzG\"};","import React from 'react'\nimport styles from './EnterNewPasswordPage.module.css';\nimport { useFormik } from \"formik\";\nimport { Notify } from \"notiflix\";\nimport * as Yup from \"yup\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { resetPassword } from '../../API/Auth/fetchRegisterUser';\n// import { sendEmailForResetPassword } from '../../API/Auth/fetchRegisterUser';\n\nconst EnterNewPasswordPage = () => {\n  const [searchParams] = useSearchParams();\n  const verificationToken = searchParams.get(\"verificationToken\");\n\n  const formik = useFormik({\n    initialValues: {\n      password: \"\",\n      confirmPassword: \"\",\n    },\n\n    validationSchema: Yup.object({\n      password: Yup.string()\n        .min(8, \"Password must be at least 8 characters\") // Мінімум 8 символів\n        .matches(/[A-Z]/, \"Must contain at least one uppercase letter\") // Мінімум одна велика літера\n        .matches(/[a-z]/, \"Must contain at least one lowercase letter\") // Мінімум одна маленька літера\n        .matches(/[0-9]/, \"Must contain at least one number\") // Мінімум одна цифра\n        .required(\"Password is required\"), // Поле обов'язкове\n      confirmPassword: Yup.string()\n              .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\") // Перевірка на співпадіння\n              .required(\"Confirm Password is required\"),\n    }),\n    onSubmit: (values, { resetForm }) => {\n      sendNewPassword(values.password);\n      // console.log(\"Form data:\", values);\n      resetForm(); // Очищення форми після відправки\n    },\n  });\n\n  async function sendNewPassword(password) {\n    console.log(\"======password====verificationToken============\");\n    console.log(verificationToken);\n    console.log(password);\n console.log(\"шаг3\");\n    try {\n      console.log(\"шаг1\");\n      \n      const result = await resetPassword(verificationToken, password);\n\n      result.success ? Notify.success(result.message) : Notify.failure(result.message);\n      \n    } catch (error) {\n       console.log(\"шаг2\");\n      console.error(\"Error in sendNewPassword:\", error);\n      Notify.failure(\"Failed to reset password.\");\n    }\n  }\n\n  return (\n    <div className={styles.containerForgotPassword}>\n      {/* Поле password */}\n      <div className={styles.boxTextForgotPassword}>Enter new password</div>\n      <div className={styles.containerForForm}>\n        <form className={styles.formEmail} onSubmit={formik.handleSubmit}>\n          <div\n            className={`${styles.formInput} ${\n              formik.values.email ? styles.hasContent : \"\"\n            }`}\n          >\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur} // Додаткове відстеження втрати фокусу\n              value={formik.values.password}\n              required\n            />\n            <label htmlFor=\"password\">Password</label>\n            {formik.touched.password && formik.errors.password && (\n              <p className={styles.errorMessage}>{formik.errors.password}</p>\n            )}\n          </div>\n\n          {/* Поле confirm Password */}\n          <div\n            className={`${styles.formInput} ${\n              formik.values.confirmPassword ? styles.hasContent : \"\"\n            }`}\n          >\n            <input\n              type=\"password\"\n              id=\"confirmPassword\"\n              name=\"confirmPassword\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur} // Додаткове відстеження втрати фокусу\n              value={formik.values.confirmPassword}\n              required\n            />\n            <label htmlFor=\"confirmPassword\">Confirm password</label>\n            {formik.touched.confirmPassword &&\n              formik.errors.confirmPassword && (\n                <p className={styles.errorMessage}>\n                  {formik.errors.confirmPassword}\n                </p>\n              )}\n          </div>\n\n          {/* Кнопка Submit */}\n          <div className={styles.boxBtnSendEmail}>\n            <button className={styles.buttonSendEmail} type=\"submit\">\n              Save\n            </button>\n          </div>\n\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default EnterNewPasswordPage;\n"],"names":["EnterNewPasswordPage","searchParams","useSearchParams","verificationToken","get","formik","useFormik","initialValues","password","confirmPassword","validationSchema","Yup","min","matches","required","oneOf","onSubmit","values","_ref","resetForm","async","console","log","result","resetPassword","success","Notify","message","failure","error","sendNewPassword","_jsxs","className","styles","children","_jsx","handleSubmit","concat","email","type","id","name","onChange","handleChange","onBlur","handleBlur","value","htmlFor","touched","errors"],"sourceRoot":""}